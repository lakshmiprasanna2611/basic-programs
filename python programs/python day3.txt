#python 3 code to demonstrate removing duplicates from list with set
a=[]
n=int(input("enter the number of elements in list:"))
for x in range(0,n):
    element=int(input("enter element"+str(x+1)))
    a.append(element)
b=set()
unique=[]
for x in a:
    if x not in b:
        unique.append(x)
        b.add(x);
print("non-duplicate items:")
print(unique)


enter the number of elements in list:
3
enter element1
2
enter element2
6
enter element3
2
non-duplicate items:
[2, 6]


#interchanging the value of first with last
a=[]
n=int(input("enter the no of elements in list"))
for x in range(0,n):
    element=int(input("enter element"+str(x+1)+":"))
    a.append(element)
temp=a[0]
a[0]=a[n-1]
a[n-1]==temp
print("new list is:")
print(a)

enter the no of elements in list
3
enter element1:
2
enter element2:
5
enter element3:
8
new list is:
[8, 5, 8]

#python program to demonstrate removal of elements
#creating a list
list=['S','A','V','E','E','T','H','A','S']
print("initial list:")
print(list)
#print elemnts of a range using slice operation
sliced_list=list[3:8]
print(sliced_list)
#print elements from a pre defined point to defined
sliced_list=list[5:]
print(sliced_list)
#print elements from beginning till defined
sliced_list=list[:]
print(sliced_list)

initial list:
['S', 'A', 'V', 'E', 'E', 'T', 'H', 'A', 'S']
['E', 'E', 'T', 'H', 'A']
['T', 'H', 'A', 'S']
['S', 'A', 'V', 'E', 'E', 'T', 'H', 'A', 'S']


#spilitting the list
a=[]
n=int(input("enter the no of elements:"))
for i in range(1,n+1):
    b=int(input("enter element:"))
    a.append(b)
even=[]
odd=[]
for j in a:
    if(j%2==0):
        even.append(j)
    else:
        odd.append(j)
print("the even list",even)
print("the odd list",odd)

enter the no of elements:
5
enter element:
3
enter element:
6
enter element:
8
enter element:
9
enter element:
8
the even list [6, 8, 8]
the odd list [3, 9]

#sum of list with rescursion
def sum_arr(arr,size):
    if(size==0):
        return 0
    else:
        return arr[size-1]+sum_arr(arr,size-1)
n=int(input("enter the number of elements for list:"))
a=[]
for i in range(0,n):
    element=int(input("enter element:"))
    a.append(element)
print("the list is:",a)
print("sum id items in list:")
b=sum_arr(a,n)
print(b)

enter the number of elements for list:
3
enter element:
2
enter element:
5
enter element:
4
the list is: [2, 5, 4]
sum id items in list:
11


#swapping
a=[]
n=int(input("enter the number of elements in list:"))
for x in range(0,n):
    element=int(input("enter element"+str(x+1)+":"))
    a.append(element)
temp=a[0]
a[0]=a[n-1]
a[n-1]=temp
print("new list is:")
print(a)


enter the number of elements in list:
3
enter element1:
2
enter element2:
4
enter element3:
1
new list is:
[1, 4, 2]

DAY 3

def maxProfit(prices, n, k):
     
    # Bottom-up DP approach
    profit = [[0 for i in range(k + 1)]
                 for j in range(n)]
     
    # Profit is zero for the first
    # day and for zero transactions
    for i in range(1, n):
         
        for j in range(1, k + 1):
            max_so_far = 0
             
            for l in range(i):
                max_so_far = max(max_so_far, prices[i] -
                            prices[l] + profit[l][j - 1])
                             
            profit[i][j] = max(profit[i - 1][j], max_so_far)
     
    return profit[n - 1][k]
 
# Driver code
k = 2
prices = [10, 22, 5, 75, 65, 80]
n = len(prices)
 
print("Maximum profit is:",
       maxProfit(prices, n, k))
Maximum profit is: 87



def comb(L):
      
    for i in range(3):
        for j in range(3):
            for k in range(3):
                  
                # check if the indexes are not
                # same
                if (i!=j and j!=k and i!=k):
                    print(L[i], L[j], L[k])
                      
# Driver Code
comb([1, 2, 3])1 2 3
1 3 2
2 1 3
2 3 1
3 1 2
3 2 1




 